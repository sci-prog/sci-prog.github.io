webpackJsonp([87572157768998],{494:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Scientific Programming Blog",siteUrl:"https://sci-prog.github.io",authors:[{name:"Oscar Arbelaez",photo:"https://avatars1.githubusercontent.com/u/1621518?s=460&v=4",github:"odarbelaeze",bio:"Simple programador de Colombia"},{name:"Pablo Alcain",photo:"https://avatars2.githubusercontent.com/u/6975120?s=400&v=4",github:"pabloalcain",bio:"Simple físico de Argentina"}]}},markdownRemark:{id:"/home/runner/work/sci-prog.github.io/sci-prog.github.io/src/pages/rust-intro/index.md absPath of file >>> MarkdownRemark",html:'<p><a href="https://www.rust-lang.org/">Rust</a> es un nuevo lenguaje de programación para sistemas de bajo nivel y,\ncomo tal, esta enfocado en proveer gran velocidad y tener una mínima huella en\ntiempo de ejecución. Rust también va mas allá ofreciendo seguridad en memoria,\nhaciendo casi imposible tener un error de segmentación <strong>sin incurrir en costo\nen tiempo de ejecución</strong>. Una descripcion corta del lenguage ha sido:\n<em>velocidades similares a C o C++ con seguridad en memoria.</em></p>\n<p>En el presente artículo introducimos cómo se siente trabajar en un proyecto\nen rust, mostrando algunas de las ventajas en cuanto a calidad de vida que\npresenta el lenguage con respecto a otros lenguajes de bajo nivel e\nintroduciendo algunos conceptos sobre el funcionamiento de rust.</p>\n<h2>Instalación</h2>\n<p>Antes de empezar un proyecto necesitamos instalar las herramientas del lenguaje.\nPara esto, la comunidad ha creado una herramienta de instalación llamada\n<a href="https://www.rustup.rs/">rustup</a>, que se instala mediante el comando:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ curl https://sh.rustup.rs -sSf <span class="token operator">|</span> sh\n</code></pre>\n      </div>\n<p>Luego de instalar rustup, debemos instalar las herramientas de rust usando:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ rustup <span class="token function">install</span> stable\n</code></pre>\n      </div>\n<p>Noten que el identificador <code>stable</code> indica que hay varias versiones de las\nherramientas de rust en un momento dado, los 3 canales principales son\n<code>nightly</code>, <code>beta</code> y <code>stable</code> y son actualizados cada 3 meses<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>.</p>\n<p>Una vez instaladas las herramientas de rust, el compilador <code>rustc</code> estará\ndisponible, y también el gestor de paquetes <code>cargo</code>.</p>\n<h2>Creación de un nuevo proyecto</h2>\n<p>Para crear un nuevo proyecto vamos a utilizar <code>cargo</code>. En este ejemplo,\nescribiremos un pequeño programa para calcular el número <code>pi</code> usando Monte Carlo.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ cargo new --bin pimc</code></pre>\n      </div>\n<p>Este comando crea un nuevo proyecto con un par de archivos:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ tree pimc\npimc\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n</code></pre>\n      </div>\n<p>El archivo <code>Cargo.toml</code> contiene metadatos sobre el proyecto<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup>, entre otros:\nnombre, autor, nombres de los ejecutables, dependencias (<strong>dependencias!</strong>).\nPor otra parte el archivo <code>main.rs</code> contiene un pequeño <code>hola mundo</code><sup id="fnref-3"><a href="#fn-3" class="footnote-ref">3</a></sup>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Gestión de dependencias</h2>\n<p>Una de mis características favoritas de rust es que permite gestionar\ndependencias usando <code>cargo</code> y <a href="https://crates.io/">crates.io</a>, esta característica es bastante\ncomún en lenguajes de programación modernos como <code>javascript</code>, <code>python</code> o\n<code>ruby</code>, pero es nueva en lenguages de programación de bajo nivel.</p>\n<p>Para el pequeño programa para cálculo de <code>pi</code> necesitamos una librería para\ngeneración de números aleatorios, la librería para este fin es <a href="https://doc.rust-lang.org/rand/rand/index.html">rand</a> y es\ndistribuída a través de <a href="https://crates.io/crates/rand">crates.io</a>, vamos a listar <code>rand</code> como\nuna dependencia en el archivo <code>Cargo.toml</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-toml"><code>[package]\n...\n\n[dependencies]\nrand = "0.4.2"</code></pre>\n      </div>\n<p>Al momento de construir el proyecto, <code>cargo</code> va a descargar la versión\nespecificada de <code>rand</code> y dado que se trata de un proyecto binario, va a crear\nun archivo <code>Cargo.lock</code> con las firmas de cada paquete usado para verificar que\nel binario siempre se construya con la misma version de cada dependencia.</p>\n<p>Finalmente, ya que se trata de un paquete externo, debemos escribir en la\nparte superior de <code>main.rs</code><sup id="fnref-4"><a href="#fn-4" class="footnote-ref">4</a></sup>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> rand<span class="token punctuation">;</span>\n\n<span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Hora de escribir código</h2>\n<p>Curiosamente, el ejemplo de cálculo de <code>pi</code> hace parte de la <a href="https://doc.rust-lang.org/rand/rand/index.html#monte-carlo-estimation-of-%CF%80">documentación del\npaquete rand</a>, pero en pocas palabras, si se toma un conjunto de\npuntos uniformemente distribuidos en un cuadrado que circunscribe un círculo,\nla razón entre la cantidad de puntos en el círculo y la cantidad de puntos\ntotales, va a ser aproximadamente igual a la razón entre el área del círculo y\nel área del cuadrado.</p>\n<p>Hay que decir que rust soporta programación <em>imperativa</em> y también\n<em>declarativa</em>; ambos estilos tienen sus ventajas, ésta sería la versión\n<em>imperativa</em> de este ejemplo:</p>\n<div class="gatsby-highlight">\n      <pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> rand<span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span>distributions<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>IndependentSample<span class="token punctuation">,</span> Range<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">let</span> between <span class="token operator">=</span> Range<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1f64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> <span class="token keyword">mut</span> in_circle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>total <span class="token punctuation">{</span>\n       <span class="token keyword">let</span> a <span class="token operator">=</span> between<span class="token punctuation">.</span><span class="token function">ind_sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">let</span> b <span class="token operator">=</span> between<span class="token punctuation">.</span><span class="token function">ind_sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">if</span> a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>\n           in_circle <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n       <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token comment">// prints something close to 3.14159...</span>\n   <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token punctuation">(</span>in_circle <span class="token keyword">as</span> f64<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>total <span class="token keyword">as</span> f64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Bien, un par de nociones sobre rust antes de continuar.</p>\n<ul>\n<li>Rust es un lenguage con tipado estático y fuerte. Sin embargo su sintaxis\nestrícta permite que el compilador infiera los tipos de las variables en la\nmayoría de los casos. Por lo tanto podemos declarar variables sin decir\ndirectamente el tipo<sup id="fnref-5"><a href="#fn-5" class="footnote-ref">5</a></sup>, como vemos en la línea<code>let between = Range::new(-1f64, 1.);</code>.</li>\n<li>Las variables en rust son inmutables por defecto. <code>let mut</code> permite modificar\neste comportamiento, es decir nada de <code>const Type algo</code>. Esto permite al\ncompilador realizar optimizaciones confiando en que en la mayoría del tiempo\nlas variables van a permanecer inmutables.</li>\n<li>La sentencia <code>for</code> en rust itera sobre elementos dentro de un iterador,\nsimilar al comportamiento de <code>for</code> en python. <code>(a..b)</code> es <em>syntactic\nsugar</em> para <code>Range(a, b)</code>. Nótese tambien que ni la sentencia <code>for</code> ni <code>if</code>\nrequieren paréntesis alrededor, aunque los <code>{}</code> son obligatorios.</li>\n<li>El identificador <code>_</code> por defecto descarta el objeto asignado, y un\nidentificador de la forma <code>_var</code> desactiva el checkeo del compilador sobre\nvariables no usadas pero no descarta el objeto asignado.</li>\n<li>Rust implementa <em>move semantics</em> en (casi) todas las estructuras de datos.\nEsto quiere decir que una llamada <code>b.ind_sample(rng)</code> transferiría la\npertenencia del recurso <code>rng</code> a la función <code>ind_sample</code> y el recurso sería\n“eliminado” de la memoria una vez dicha función termine su <em>scope</em>. La\nsolución de rust para esto es realizar <em>préstamos</em>: <code>&#x26;var</code> es un préstamo\ninmutable del recurso <code>var</code> mientras que <code>&#x26;mut var</code> es un préstamo mutable\ndel recurso <code>var</code><sup id="fnref-6"><a href="#fn-6" class="footnote-ref">6</a></sup>.</li>\n<li>No hay <em>type cohersion</em> en rust, y los operadores aritméticos no estan\nsobrecargados para tipos diferentes, por tanto una instrucción como\n<code>let x = 3f64 * 2i32;</code> es ilegal en rust y por ningún motivo va a compilar.\nAsí, tipos incompatibles tienen que ser manualmente reinterpretados\nusando <code>var as Type</code>.</li>\n</ul>\n<p>Demasiados conceptos para un programa tan corto, pero, siendo tan estrictas las\nreglas, el compilador se va a encargar de recordar cada una a los nuevos\nprogramadores. Sólo para referencia, démosle un vistazo a la forma\n<em>declarativa</em> del mismo programa:</p>\n<div class="gatsby-highlight">\n      <pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">let</span> between <span class="token operator">=</span> Range<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1f64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> in_circle<span class="token punctuation">:</span> i64 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span>total<span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">(</span>\n            between<span class="token punctuation">.</span><span class="token function">ind_sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            between<span class="token punctuation">.</span><span class="token function">ind_sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">|</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token keyword">if</span> a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">// prints something close to 3.14159...</span>\n   <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token punctuation">(</span>in_circle <span class="token keyword">as</span> f64<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>total <span class="token keyword">as</span> f64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>En forma declarativa le damos mas libertad al compilador de decidir cómo\nmaterializar nuestra intención. Esto abre las puertas a obtener ganancias en\nrendimiento con mejoras en el compilador y sin cambios en el código.</p>\n<h2>Compilación y distribución</h2>\n<p>Para compilar y distribuir el programa usamos el gestor de paquetes <code>cargo</code>,\npara correr el programa en modo <em>debug</em> (compilación rápida y ejecución lenta)\nusamos el comando:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ cargo run\n   Compiling pimc v0.1.0 <span class="token punctuation">(</span>file:///home/oscar/Code/pimc<span class="token punctuation">)</span>\n    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> 0.44 secs\n     Running <span class="token variable"><span class="token variable">`</span>target/debug/pimc<span class="token variable">`</span></span>\n3.142992\n</code></pre>\n      </div>\n<p>Para crear un ejecutable optimizado, disponemos del comando,</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>cargo run --release\n</code></pre>\n      </div>\n<p>Finalmente, para crear un ejecutable linkeado estáticamente para correr en\nplataformas desconocidad de linux (un cluster heterogéneo o similar) vamos a\ninstalar un nuevo target usando <code>rustup</code> y compilar usando ese target<sup id="fnref-7"><a href="#fn-7" class="footnote-ref">7</a></sup>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>rustup target add x86_64-unknown-linux-gnu\ncargo build --release --target=x86_64-unknown-linux-gnu</code></pre>\n      </div>\n<p>Uno de los objetivos del equipo de rust es lograr <em>cross compilation</em> con un\ncomando. Hay una muy buena <a href="https://github.com/japaric/rust-cross">guía para cross compilation en rust</a>.</p>\n<h2>Conclusión</h2>\n<p>Rust es un lenguaje de programación promisorio, con un muy buen ecosistema pese\na su juventud. Las herramientas de desarrollo disponibles y decisiones del lenguaje hacen\nde programar en rust una experiencia <em>ergonómica</em>. La compilación cruzada\npermite compilar programas complejos para correr de manera segura en ambientes\nheterogéneos como <a href="https://www.opensciencegrid.org/">open science grid</a> sin mucha dificultad, incluso cuando\nla lista de dependencias es bastante larga. Finalmente las reglas estríctas del\nlenguaje, aunque hacen un poco frustrante el lenguaje al principio, hacen mucho\nmás facil producir código libre de bugs a programadores con diferentes niveles\nde experiencia.</p>\n<p>El código en este artículo se puede encontrar en <a href="https://github.com/sci-prog/pimc">github</a>.</p>\n<div class="footnotes">\n<hr>\n<ol>\n<li id="fn-1">\n<p>Más sobre el ciclo de desarrollo de rust en su página de <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md">releases</a></p>\n<a href="#fnref-1" class="footnote-backref">↩</a>\n</li>\n<li id="fn-2">\n<p>Mas sobre <code>Cargo.toml</code> en la <a href="https://doc.rust-lang.org/cargo/reference/manifest.html">documentacion de referencia</a></p>\n<a href="#fnref-2" class="footnote-backref">↩</a>\n</li>\n<li id="fn-3">\n<p>Esto se debe a que creamos el proyecto con un <code>--bin</code> flag de lo\ncontrario encontraríamos <code>lib.rs</code> y una estructura un poco más seria.</p>\n<a href="#fnref-3" class="footnote-backref">↩</a>\n</li>\n<li id="fn-4">\n<p>Las instrucciones <code>extern crate</code> deben ir en la raíz del proyecto, para\nel caso binario esto es <code>main.rs</code>, en otro caso sería <code>lib.rs</code>.</p>\n<a href="#fnref-4" class="footnote-backref">↩</a>\n</li>\n<li id="fn-5">\n<p>En una nota relacionada, rust implementa <em>resource acquisition is\ninitialization</em> por tanto una sentencia como <code>let variable;</code> es ilegal, más\nsobre <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">raii</a>.</p>\n<a href="#fnref-5" class="footnote-backref">↩</a>\n</li>\n<li id="fn-6">\n<p>Los prestamos en rust son tipos de datos, es decir <code>T</code> es un tipo\ndiferente a <code>&#x26;T</code> y a su vez a <code>&#x26;mut T</code>, no hay <em>type cohersion</em> entre estos\ntipos, a diferencia de <code>C++</code> donde una funcion con la firma <code>void something(const &#x26; var)</code> va a poder ser llamada con un objeto concreto\n<code>something(var)</code> y el compilador se va a encargar de construir un <code>const &#x26; var</code> a partir del objeto concreto.</p>\n<a href="#fnref-6" class="footnote-backref">↩</a>\n</li>\n<li id="fn-7">\n<p>Puede que se requieran otras herramientas de compilación, y un archivo\n<code>~/.cargo/config</code> pero una vez configurado funciona <strong>así de fácil</strong>.</p>\n<a href="#fnref-7" class="footnote-backref">↩</a>\n</li>\n</ol>\n</div>',frontmatter:{title:"Una ligera introducción a Rust",date:"January 14, 2018",author:"odarbelaeze"},fields:{slug:"/rust-intro/"}}},pathContext:{slug:"/rust-intro/"}}}});
//# sourceMappingURL=path---rust-intro-ad1fe339552b33448e27.js.map